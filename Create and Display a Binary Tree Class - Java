

import java.util.Scanner;

public class binaryTree {

    private class Node {
        int data;
        Node left;
        Node right;
        Node(int data, Node left, Node right) {
            this.data=data;
            this.left=left;
            this.right=right;
        }
    }

    Node root = null;
    int size= 0;

    binaryTree(){
        Scanner scn = new Scanner(System.in);
        this.root = takeInput(scn,null,false);
    }

    private Node takeInput(Scanner scn, Node parent, boolean isLeftorRight) {

        if (parent==null) {
            System.out.println("Enter the root data");
        }
        else  {
            if (isLeftorRight) {
                System.out.println("Enter the data for left child");
            }
            else {
                System.out.println("Enter the data for right child");
            }

        }

        int info = scn.nextInt();
        Node node = new Node(info,null,null);
        this.size+=1;

        boolean isleft = false;

        System.out.println("Does" + node.data + "have a left child");
        isleft = scn.nextBoolean();

        if (isleft){
            node.left = takeInput(scn, node, true);
        }

        isleft=false;

        System.out.println("Does" + node.data + "have a right child");
        isleft = scn.nextBoolean();

        if (isleft){
            node.right = takeInput(scn, node, false);
        }

        return node;
    }

    public void Display(){
        this.display(this.root);
    }

    private void display(Node node){

        String str = "";

        str = str + node.data;

        str = str + " =>" ;

        if (node.left!=null){
            str = str+"Left child is " +node.left.data;
            str = str + " ,";
        }
        

        if (node.right!=null){
            str = str + "Right child is "+ node.right.data;
            str = str + " ,";
        }

        System.out.println(str);

        if (node.left!=null){
            display(node.left);
        }

        if (node.right!=null){
            display(node.right);
        }


    }
}
